<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find moveit_resources_panda_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="pipeline" default="ompl" />

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="rviz_tutorial" default="false" />
  <arg name="use_gui" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find moveit_resources_panda_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 world panda_link0" />

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="$(arg use_gui)"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find moveit_resources_panda_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"  />
  </include>

  <!-- Run Rviz -->
  <include file="$(find moveit_resources_panda_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_tutorial" value="$(arg rviz_tutorial)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find moveit_resources_panda_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>










<!-- ########################################################################## 

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find moveit_resources_panda_description)/urdf/panda.world"/>
		<arg name="paused" default="true" />
		<arg name="use_sim_time" default="true" />
		<arg name="gui" default="true" />
		<arg name="headless" default="false" />
		<arg name="debug" default="false" />
	</include>
  <arg name="load_gazebo" default="true"/>


  <arg name="initial_joint_states"
    default=" -J panda::panda_joint1 0.000
              -J panda::panda_joint2 -0.785
              -J panda::panda_joint3 0.0
              -J panda::panda_joint4 -2.356
              -J panda::panda_joint5 0.0
              -J panda::panda_joint6 1.57
              -J panda::panda_joint7 0.785"/>
              
              
		<param name="robot_description" command="$(find xacro)/xacro $(find moveit_resources_panda_description)/urdf/panda.urdf" />
		
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param robot_description -urdf -model panda"/>


-->










<!--

  <param name="robot_description" command="$(find xacro)/xacro - -inorder $(find franka_panda_description)/robots/panda_arm_hand.urdf.xacro load_gripper:=$(arg load_gripper) load_gazebo:=$(arg load_gazebo)"/>


  <param name="/arm/root_name" value="panda_link0" />
  <param if="$(arg load_gripper)" name="/arm/tip_name" value="panda_hand" /> 
  <param unless="$(arg load_gripper)" name="/arm/tip_name" value="panda_link8" /> 

  <param if="$(arg load_gripper)" name="/franka_gripper/robot_ip" value="sim" /> 

  <param if="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_hand" /> 
  <param unless="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_link8" /> 


  <include if="$(arg load_gazebo)" file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find panda_gazebo)/worlds/panda.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>


  <node name="robot_description" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model panda $(arg initial_joint_states)"/>

-->





</launch>
